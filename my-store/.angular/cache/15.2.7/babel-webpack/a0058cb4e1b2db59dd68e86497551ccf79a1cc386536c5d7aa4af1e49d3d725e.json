{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class StoreService {\n  constructor() {\n    this.myShoppingCart = []; // Aqui guardaremos los productos\n    this.myCart = new BehaviorSubject([]);\n    //Se usa un $ cuando se trata de un observable\n    this.myCart$ = this.myCart.asObservable();\n  }\n  addProduct(product) {\n    this.myShoppingCart.push(product); // Agregamos el producto al carrito\n    this.myCart.next(this.myShoppingCart);\n  }\n  //Como myShoppingCart es privado, usaremos un método para acceder a la información\n  getShoppingCart() {\n    return this.myShoppingCart;\n  }\n  getTotal() {\n    return this.myShoppingCart.reduce((sum, product) => sum + product.price, 0);\n  }\n}\nStoreService.ɵfac = function StoreService_Factory(t) {\n  return new (t || StoreService)();\n};\nStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StoreService,\n  factory: StoreService.ɵfac,\n  providedIn: 'root' // El alcance del servivio\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAQtC,OAAM,MAAOC,YAAY;EAOvBC;IANQ,mBAAc,GAAc,EAAE,CAAC,CAAC;IAChC,WAAM,GAAG,IAAIF,eAAe,CAAY,EAAE,CAAC;IAEnD;IACA,YAAO,GAAG,IAAI,CAACG,MAAM,CAACC,YAAY,EAAE;EAEpB;EAEhBC,UAAU,CAACC,OAAgB;IACzB,IAAI,CAACC,cAAc,CAACC,IAAI,CAACF,OAAO,CAAC,EAAC;IAClC,IAAI,CAACH,MAAM,CAACM,IAAI,CAAC,IAAI,CAACF,cAAc,CAAC;EAGvC;EAEA;EACAG,eAAe;IAAK,OAAO,IAAI,CAACH,cAAc;EAAA;EAE9CI,QAAQ;IAAK,OAAO,IAAI,CAACJ,cAAc,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEP,OAAO,KAAKO,GAAG,GAAGP,OAAO,CAACQ,KAAK,EAAC,CAAC,CAAC;EAAC;;AAnB7Eb,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAc,SAAZd,YAAY;EAAAe,YAFX,MAAM,CAAC","names":["BehaviorSubject","StoreService","constructor","myCart","asObservable","addProduct","product","myShoppingCart","push","next","getShoppingCart","getTotal","reduce","sum","price","factory","providedIn"],"sourceRoot":"","sources":["/home/doplax/eCommerce-Angular/my-store/src/app/services/store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Product }from '../interfaces/product.interface';\n\n\n@Injectable({\n  providedIn: 'root' // El alcance del servivio\n})\nexport class StoreService {\n  private myShoppingCart: Product[] = []; // Aqui guardaremos los productos\n  private myCart = new BehaviorSubject<Product[]>([]);\n\n  //Se usa un $ cuando se trata de un observable\n  myCart$ = this.myCart.asObservable();\n\n  constructor() { }\n\n  addProduct(product: Product) {\n    this.myShoppingCart.push(product) // Agregamos el producto al carrito\n    this.myCart.next(this.myShoppingCart);\n\n\n  }\n\n  //Como myShoppingCart es privado, usaremos un método para acceder a la información\n  getShoppingCart() { return this.myShoppingCart}\n\n  getTotal() { return this.myShoppingCart.reduce((sum, product) => sum + product.price,0) }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}