{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class StoreService {\n  constructor() {\n    this.myShoppingCart = []; // Aqui guardaremos los productos\n    this.total = 0;\n  }\n  addProduct(product) {\n    this.myShoppingCart.push(product); // Agregamos el producto al carrito\n  }\n  //Como myShoppingCart es privado, usaremos un método para acceder a la información\n  getShoppingCart() {\n    return this;\n    getTotal();\n    {\n      return this.total = this.myShoppingCart.reduce((sum, product) => sum + product.price, 0);\n    }\n  }\n}\nStoreService.ɵfac = function StoreService_Factory(t) {\n  return new (t || StoreService)();\n};\nStoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StoreService,\n  factory: StoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,YAAY;EAKvBC;IAJQ,mBAAc,GAAc,EAAE,CAAC,CAAC;IACxC,UAAK,GAAW,CAAC;EAGD;EAEhBC,UAAU,CAACC,OAAgB;IACzB,IAAI,CAACC,cAAc,CAACC,IAAI,CAACF,OAAO,CAAC,EAAC;EACpC;EAEA;EACAG,eAAe;IAAK,OAAO,IAAI;IAE/BC,QAAQ,EAAE;IAAC;MACT,OAAO,IAAI,CAACC,KAAK,GAAI,IAAI,CAACJ,cAAc,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEP,OAAO,KAAKO,GAAG,GAAGP,OAAO,CAACQ,KAAK,EAAC,CAAC,CAAC;;EAE5F;;AAjBaX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAY,SAAZZ,YAAY;EAAAa,YAFX;AAAM","names":["StoreService","constructor","addProduct","product","myShoppingCart","push","getShoppingCart","getTotal","total","reduce","sum","price","factory","providedIn"],"sourceRoot":"","sources":["/home/doplax/eCommerce-Angular/my-store/src/app/services/store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Product }from '../interfaces/product.interface';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n  private myShoppingCart: Product[] = []; // Aqui guardaremos los productos\n  total: number = 0;\n\n\n  constructor() { }\n\n  addProduct(product: Product) {\n    this.myShoppingCart.push(product) // Agregamos el producto al carrito\n  }\n\n  //Como myShoppingCart es privado, usaremos un método para acceder a la información\n  getShoppingCart() { return this\n\n  getTotal() {\n    return this.total =  this.myShoppingCart.reduce((sum, product) => sum + product.price,0)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}